require "thor"
require_relative "api_connection"
require_relative "test_report_merger"
require_relative "simplecov_resultset_translator"
require_relative "logger"

# Bootstrapped from `bin/oyencov`
#
#
module OyenCov
  class CLI < Thor
    desc "translate_simplecov coverage/.resultset.json", "err"
    long_desc <<~TEXT
      If you have parallel test jobs, this command is to be run right after
      finishing the tests, and before artifacts are uploaded.

      Assumes the --coverage-dir path contains both the simplecov .resultset.json,
      and the oyencov-resultset.json. It parses the .resultset.json file
      generated by simplecov, and append the translated information into the
      pre-existing oyencov-resultset.json.
    TEXT
    # option :coverage_dir, default: "coverage"
    option :simplecov_json_path, default: "coverage/.resultset.json"
    option :oyencov_json_path, default: "coverage/oyencov-resultset.json"
    option :dry_run, type: :boolean, default: false
    def translate_simplecov
      oyencov_json_path = Dir.pwd + "/" + options[:oyencov_json_path]
      simplecov_json_path = Dir.pwd + "/" + options[:simplecov_json_path]

      # Find existing resultset files
      # We can start with empty JSON instead of exiting with error
      if File.exist?(oyencov_json_path)
        oyencov_json = File.read(oyencov_json_path)
      else
        warn("Could not find existing oyencov-resultset.json at #{oyencov_json_path}.")
        oyencov_json = "{}"
      end

      warn "Starting to translate simplecov"

      if File.exist?(simplecov_json_path)
        simplecov_translated_json = OyenCov::SimplecovResultsetTranslator.translate(simplecov_json_path)
      else
        warn("Could not find existing simplecov's .resultset.json at #{simplecov_json_path}")
        exit(1)
      end

      warn "Done translating simplecov"

      # Attempt merging
      oyencov_resultset = JSON.parse(oyencov_json)
      oyencov_resultset = oyencov_resultset.merge("method_hits" => simplecov_translated_json)

      # Persist, or dry run stdout?
      new_oyencov_resultset_json = JSON.pretty_generate(oyencov_resultset)
      if options[:dry_run]
        puts new_oyencov_resultset_json
      else
        File.write(oyencov_json_path, new_oyencov_resultset_json)
      end

      warn "Saved oyencov resultset to: #{oyencov_json_path}"
    end

    desc "submit tmp/coverage-jsons-*/oyencov-resultset.json",
      "submits the oyencov resultsets data"
    option :files, type: :array, default: ["coverage/oyencov-resultset.json"]
    option :git_commit_sha, required: true
    option :token
    def submit
      resultset_files = options[:files]
      if resultset_files.any?
        OyenCov::Logger.log "Found #{resultset_files.join(", ")}"
      else
        puts "No resultset files found"
        exit 1
      end

      collated_report = OyenCov::TestReportMerger
        .collate_job_reports(options[:files])
        .merge({
          "git_commit_sha" => options[:git_commit_sha]
        })

      # puts JSON.pretty_generate(collated_report)

      # Add metadaata

      ENV["OYENCOV_API_KEY"] ||= options[:token]
      unless ENV["OYENCOV_API_KEY"]
        warn "API token not set. Unable to submit."
        exit(1)
      end

      connection = OyenCov::APIConnection.instance
      post_response = connection.post_test_report(collated_report)

      puts post_response.body
    end
  end
end
